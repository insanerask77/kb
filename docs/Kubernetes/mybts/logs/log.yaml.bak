NAME: mybts
LAST DEPLOYED: Mon Sep 19 09:51:10 2022
NAMESPACE: mybts-ns
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
back:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  enabled: true
  fullnameOverride: ""
  global:
    auth:
      postgres:
        password: postgres
        username: postgres
  image:
    pullPolicy: Always
    registry: rafabts
    repository: be
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 3000
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
front:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  enabled: true
  fullnameOverride: ""
  global:
    auth:
      postgres:
        password: postgres
        username: postgres
  image:
    pullPolicy: Always
    registry: rafabts
    repository: fe
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
fullnameOverride: ""
global:
  auth:
    postgres:
      password: postgres
      username: postgres
image:
  pullPolicy: IfNotPresent
  repository: nginx
  tag: ""
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: false
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: ""
    enablePostgresUser: true
    existingSecret: ""
    password: ""
    postgresPassword: ""
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      auth:
        postgres:
          password: postgres
          username: postgres
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        auth:
          database: postgres
          existingSecret: ""
          password: postgres
          postgresPassword: postgres
          secretKeys:
            adminPasswordKey: postgres
            replicationPasswordKey: postgres
            userPasswordKey: postgres
          username: postgres
        service:
          ports:
            postgresql: "5432"
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    auth:
      postgres:
        password: postgres
        username: postgres
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: postgres
        existingSecret: ""
        password: postgres
        postgresPassword: postgres
        secretKeys:
          adminPasswordKey: postgres
          replicationPasswordKey: postgres
          userPasswordKey: postgres
        username: postgres
      service:
        ports:
          postgresql: "5432"
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.5.0-debian-11-r14
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.11.1-debian-11-r8
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r35
    resources:
      limits: {}
      requests: {}
replicaCount: 1
resources: {}
securityContext: {}
seed:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  enabled: true
  fullnameOverride: ""
  global:
    auth:
      postgres:
        password: postgres
        username: postgres
  image:
    pullPolicy: Always
    registry: rafabts
    repository: be
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 9000
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: ""
tolerations: []

HOOKS:
---
# Source: mybts/charts/back/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mybts-back-test-connection"
  labels:
    helm.sh/chart: back-0.1.0
    app.kubernetes.io/name: back
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['mybts-back:3000']
  restartPolicy: Never
---
# Source: mybts/charts/front/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mybts-front-test-connection"
  labels:
    helm.sh/chart: front-0.1.0
    app.kubernetes.io/name: front
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['mybts-front:80']
  restartPolicy: Never
---
# Source: mybts/charts/seed/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mybts-seed-test-connection"
  labels:
    helm.sh/chart: seed-0.1.0
    app.kubernetes.io/name: seed
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['mybts-seed:9000']
  restartPolicy: Never
---
# Source: mybts/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mybts-test-connection"
  labels:
    helm.sh/chart: mybts-0.1.0
    app.kubernetes.io/name: mybts
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['tail', '-f', '/dev/null']
      args: ['mybts:80']
  restartPolicy: Never
MANIFEST:
---
# Source: mybts/charts/back/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mybts-back
  namespace: mybts-ns
  labels:
    helm.sh/chart: back-0.1.0
    app.kubernetes.io/name: back
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: mybts/charts/front/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mybts-front
  namespace: mybts-ns
  labels:
    helm.sh/chart: front-0.1.0
    app.kubernetes.io/name: front
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: mybts/charts/seed/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mybts-seed
  namespace: mybts-ns
  labels:
    helm.sh/chart: seed-0.1.0
    app.kubernetes.io/name: seed
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: mybts/charts/back/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: docker
  namespace: mybts-ns
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: >-
    eyJhdXRocyI6eyJkb2NrZXIuaW8iOnsidXNlcm5hbWUiOiJyYWZhYnRzIiwicGFzc3dvcmQiOiJNYWRvbGVsbDEuLiIsImVtYWlsIjoicmFmYWVsbUBibHVldHJhaWxzb2Z0LmNvbSIsImF1dGgiOiJjbUZtWVdKMGN6cE5ZV1J2YkdWc2JERXVMZz09In19fQ==
---
# Source: mybts/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mybts-postgresql
  namespace: "mybts-ns"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.1
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: mybts/charts/seed/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: docker-seed
  namespace: mybts-ns
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: >-
    eyJhdXRocyI6eyJkb2NrZXIuaW8iOnsidXNlcm5hbWUiOiJyYWZhYnRzIiwicGFzc3dvcmQiOiJNYWRvbGVsbDEuLiIsImVtYWlsIjoicmFmYWVsbUBibHVldHJhaWxzb2Z0LmNvbSIsImF1dGgiOiJjbUZtWVdKMGN6cE5ZV1J2YkdWc2JERXVMZz09In19fQ==
---
# Source: mybts/templates/global-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "global-secret"
  namespace: mybts-ns
type: Opaque
data:
  DB_PASSWORD: "cG9zdGdyZXM="
  CLIENT_SECRET: "R09DU1BYLXZxYlhRTlhMLVpMdThGeEgzWlh1SVJFWWF0QVU="
---
# Source: mybts/charts/back/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "mybts-back-cfg"
  namespace: mybts-ns
data:
    DB_HOST: "mybts1-postgresql"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "postgres"
    DB_PORT: "5432"
    DB_SCHEMA: "public"
    TOKEN_SECRET: "secret"
    TIME_DURATION: "24"
    TIME_INTERVAL: "hours"
    TIME_EXPIRATION: "24:00:00"
    SECURITY_SALT: "10"
    FRONT_HOST: "http://mybts1-front"
    MAX_ID_RANGE: "2147483647"
    MAIL_SENDER: "no-reply@bluetrailsoft.com"
    MAIL_HOST: "email-smtp.us-west-2.amazonaws.com"
    MAIL_PORT: "465"
    MAIL_USER: ""
    MAIL_PASS: ""
    APP_PORT: "3000"
    API_URL: "http://mybts1-back:3000"
    S3_BUCKET: "mybts-s3"
    S3_FOLDER: "dev"
    AWS_ACCESS_KEY_ID: "AKIAUETUB7XCT2UOJ4DL"
    AWS_SECRET_ACCESS_KEY: "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"
    AWS_REGION: "us-east-2"
    S3_FOLDER_BACKUP: "platformBackups/dev_backups"
    S3_PROJECT_FILES_FOLDER: "projectFiles"
    V2_TIME_DURATION: "24"
    V2_TIME_INTERVAL: "hours"
    V2_TIME_EXPIRATION: "24:00:00"
    WEATHER_API_KEY: "134e7fd1f8e8a5365e270b8ad776300b"
    WEATHER_UPDATE_FREQUENCY: "1"
    MANAGER_ID_ROLE: "1"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    CLIENT_ID: "461536394247-4csspqfng903p10nm444i4qoiemjfp18.apps.googleusercontent.com"
    PROJECT_ID: "BTS-Platform-2"
    AUTH_URI: "https://accounts.google.com/o/oauth2/auth"
    TOKEN_URI: "https://oauth2.googleapis.com/token"
    AUTH_PROVIDER_X509_CERT_URL: "https://www.googleapis.com/oauth2/v3/certs"
    CLIENT_SECRET: "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"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    JAVASCRIPT_ORIGINS: '["http://localhost:4200","http://localhost","https://dev.platform.bluetrail.software","https://dev.platform.bluetrail.software:80","http://dev.platform.bluetrail.software","http://dev.platform.bluetrail.software:80","http://mybts-qa.bluetrail.software","https://mybts-qa.bluetrail.software",http://mybts.bluetrail.software]'
---
# Source: mybts/charts/front/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "mybts-front-cfg"
  namespace: mybts-ns
data:
    REACT_APP_CLIENT_ID: "461536394247-4csspqfng903p10nm444i4qoiemjfp18.apps.googleusercontent.com"
    REACT_APP_BACKEND: "http://mybts1-front"
    REACT_APP_PORT: "80"
    REACT_APP_BACKEND_VERSION: "/api/V2"
    REACT_APP_S3_FOLDER: "dev"
    REACT_APP_S3_BUCKET: ""
    REACT_APP_S3_ROOT: "https://mybts-s3.s3.amazonaws.com"
---
# Source: mybts/charts/seed/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "mybts-seed-cfg"
  namespace: mybts-ns
data:
    DB_HOST: "mybts1-postgresql"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "postgres"
    DB_PORT: "5432"
    DB_SCHEMA: "public"
    TOKEN_SECRET: "secret"
    TIME_DURATION: "24"
    TIME_INTERVAL: "hours"
    TIME_EXPIRATION: "24:00:00"
    SECURITY_SALT: "10"
    FRONT_HOST: "http://mybts1-front"
    MAX_ID_RANGE: "2147483647"
    MAIL_SENDER: "no-reply@bluetrailsoft.com"
    MAIL_HOST: "email-smtp.us-west-2.amazonaws.com"
    MAIL_PORT: "465"
    MAIL_USER: "AKIASGEYYWBBLW4MYDVS"
    MAIL_PASS: "BC1SvTj5aig2JVD2g4YuZ94D2GSgmSna6A/hyPxXMmwo"
    APP_PORT: "9000"
    API_URL: "http://mybts1-back:9000"
    S3_BUCKET: "mybts-s3"
    S3_FOLDER: "dev"
    AWS_ACCESS_KEY_ID: "AKIAUETUB7XCT2UOJ4DL"
    AWS_SECRET_ACCESS_KEY: "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"
    AWS_REGION: "us-east-2"
    S3_FOLDER_BACKUP: "platformBackups/dev_backups"
    S3_PROJECT_FILES_FOLDER: "projectFiles"
    V2_TIME_DURATION: "24"
    V2_TIME_INTERVAL: "hours"
    V2_TIME_EXPIRATION: "24:00:00"
    WEATHER_API_KEY: "134e7fd1f8e8a5365e270b8ad776300b"
    WEATHER_UPDATE_FREQUENCY: "1"
    MANAGER_ID_ROLE: "1"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    CLIENT_ID: "461536394247-4csspqfng903p10nm444i4qoiemjfp18.apps.googleusercontent.com"
    PROJECT_ID: "BTS-Platform-2"
    AUTH_URI: "https://accounts.google.com/o/oauth2/auth"
    TOKEN_URI: "https://oauth2.googleapis.com/token"
    AUTH_PROVIDER_X509_CERT_URL: "https://www.googleapis.com/oauth2/v3/certs"
    CLIENT_SECRET: "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"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    JAVASCRIPT_ORIGINS: '["http://localhost:4200","http://localhost","https://dev.platform.bluetrail.software","https://dev.platform.bluetrail.software:80","http://dev.platform.bluetrail.software","http://dev.platform.bluetrail.software:80","http://mybts-qa.bluetrail.software","https://mybts-qa.bluetrail.software",http://mybts.bluetrail.software]'
---
# Source: mybts/templates/global-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "global-config"
  namespace: mybts-ns
data:
    # PORTS
    APP_PORT: "80"
    
    # HOST
    FRONT_HOST: "http://mybts-front"
    API_URL: "http://mybts-back:80"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    AUTH_URI: "https://accounts.google.com/o/oauth2/auth"
    TOKEN_URI: "https://oauth2.googleapis.com/token"
    AUTH_PROVIDER_X509_CERT_URL: "https://www.googleapis.com/oauth2/v3/certs"
    REDIRECT_URIS: '["http://mybts.bluetrail.software/api/V2/module0/login/redirect"]'
    # Auth
    DB_USER: postgres
---
# Source: mybts/charts/back/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mybts-back
  namespace: mybts-ns
  labels:
    helm.sh/chart: back-0.1.0
    app.kubernetes.io/name: back
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: back
    app.kubernetes.io/instance: mybts
---
# Source: mybts/charts/front/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mybts-front
  namespace: mybts-ns
  labels:
    helm.sh/chart: front-0.1.0
    app.kubernetes.io/name: front
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: front
    app.kubernetes.io/instance: mybts
---
# Source: mybts/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mybts-postgresql-hl
  namespace: "mybts-ns"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.1
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/component: primary
---
# Source: mybts/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mybts-postgresql
  namespace: "mybts-ns"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.1
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/component: primary
---
# Source: mybts/charts/seed/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mybts-seed
  namespace: mybts-ns
  labels:
    helm.sh/chart: seed-0.1.0
    app.kubernetes.io/name: seed
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: seed
    app.kubernetes.io/instance: mybts
---
# Source: mybts/charts/back/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mybts-back
  namespace: mybts-ns
  labels:
    helm.sh/chart: back-0.1.0
    app.kubernetes.io/name: back
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: back
      app.kubernetes.io/instance: mybts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: back
        app.kubernetes.io/instance: mybts
    spec:
      serviceAccountName: mybts-back
      securityContext:
        {}
      imagePullSecrets:
        - name: docker
      containers:
        - name: back
          securityContext:
            {}
          image: "rafabts/be:latest"
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: "mybts-back-cfg"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: mybts/charts/front/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mybts-front
  namespace: mybts-ns
  labels:
    helm.sh/chart: front-0.1.0
    app.kubernetes.io/name: front
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: front
      app.kubernetes.io/instance: mybts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: front
        app.kubernetes.io/instance: mybts
    spec:
      serviceAccountName: mybts-front
      securityContext:
        {}
      containers:
        - name: front
          securityContext:
            {}
          image: "rafabts/fe:latest"
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: "mybts-front-cfg"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: mybts/charts/seed/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mybts-seed
  namespace: mybts-ns
  labels:
    helm.sh/chart: seed-0.1.0
    app.kubernetes.io/name: seed
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: seed
      app.kubernetes.io/instance: mybts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: seed
        app.kubernetes.io/instance: mybts
    spec:
      serviceAccountName: mybts-seed
      securityContext:
        {}
      imagePullSecrets:
        - name: docker-seed
      containers:
        - name: seed
          securityContext:
            {}
          image: "rafabts/be:latest"
          imagePullPolicy: Always
          env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: global-secret
                key: DB_PASSWORD
          envFrom:
          - configMapRef:
              name: "mybts-seed-cfg"
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: mybts/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mybts-postgresql
  namespace: "mybts-ns"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.1
    app.kubernetes.io/instance: mybts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: mybts-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: mybts
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: mybts-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.1
        app.kubernetes.io/instance: mybts
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: mybts
                    app.kubernetes.io/component: primary
                namespaces:
                  - "mybts-ns"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "global-secret"
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              value: "postgres"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

NOTES:
888b     d888 Y88b   d88P 888888b. 88888888888 .d8888b.       888    d8P           888                                         888                     
8888b   d8888  Y88b d88P  888  "88b    888    d88P  Y88b      888   d8P            888                                         888                     
88888b.d88888   Y88o88P   888  .88P    888    Y88b.           888  d8P             888                                         888                     
888Y88888P888    Y888P    8888888K.    888     "Y888b.        888d88K     888  888 88888b.   .d88b.  888d888 88888b.   .d88b.  888888 .d88b.  .d8888b  
888 Y888P 888     888     888  "Y88b   888        "Y88b.      8888888b    888  888 888 "88b d8P  Y8b 888P"   888 "88b d8P  Y8b 888   d8P  Y8b 88K      
888  Y8P  888     888     888    888   888          "888      888  Y88b   888  888 888  888 88888888 888     888  888 88888888 888   88888888 "Y8888b. 
888   "   888     888     888   d88P   888    Y88b  d88P      888   Y88b  Y88b 888 888 d88P Y8b.     888     888  888 Y8b.     Y88b. Y8b.          X88 
888       888     888     8888888P"    888     "Y8888P"       888    Y88b  "Y88888 88888P"   "Y8888  888     888  888  "Y8888   "Y888 "Y8888   88888P' 
                                                                                                                                                       
___  _   _    ____ ____ ____ ____    _  _ ____ ___  ____ _    ____ _    _    
|__]  \_/     |__/ |__| |___ |__|    |\/| |__| |  \ |  | |    |___ |    |    
|__]   |      |  \ |  | |    |  |    |  | |  | |__/ |__| |___ |___ |___ |___
