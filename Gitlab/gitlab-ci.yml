variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: bts
  GITLAB_TOKEN: $GITLAB_TOKEN
  # SCAN_ANNOTATE_PR: "true"
  # SECURE_LOG_LEVEL: "debug"

image: openjdk:8-jdk

# include:
#   - template: Security/SAST.gitlab-ci.yml

services:
  - name: postgres:12.2
    alias: postgresdb

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $GRADLE_USER_HOME/caches/
    - $GRADLE_USER_HOME/wrapper/
    - $GRADLE_USER_HOME/dependency-check-data/4.0

before_script:
  - apt-get update -qq && apt-get install

# You specify the stages. Those are the steps that GitLab will go through
# Order matters.
stages:
  - build
  - test
  - security
  - deploy

build:
  stage: build
  tags:
    - docker
  #before_script:
  #  - echo "serviceInfo={name:\"$CI_PROJECT_NAME\",version:\"$CI_COMMIT_SHA\",stack:\"\${system.stack}\"}" > src/main/resources/config/application-serviceInfo.properties
  script: ./gradlew assemble
  artifacts:
    expire_in: 1 day
    paths:
      - build/libs/$CI_PROJECT_NAME-*.jar
  #  except:
  #    refs:
  #      - cicd-preprod
  #only:
  #  refs:
  #    - dw-gitlab-ci

trufflehog:
  tags:
    - docker
  stage: security
  image: python:3-alpine
  script:
    - apk add --no-cache git
    - pip install trufflehog
    - adduser -S truffleHog
    - trufflehog --entropy true "file://$PWD"


sonarqube:
  stage: security
  tags:
    - docker
  script:
    - |
      ./gradlew sonarqube \
      -Dsonar.projectKey=bts-resume \
      -Dsonar.host.url=https://sonarqube.bluetrail.software \
      -Dsonar.login=$SONARQUBE_KEY
  artifacts:
    expire_in: 1 day
    name: "test-results-$CI_COMMIT_REF_NAME"
    paths:
      - build/test-results/test/TEST-*.xml
    reports:
      junit: build/test-results/test/TEST-*.xml

test:
  stage: test
  tags:
    - docker
  script:
    #Testing if DB can be accessed
    - env | grep -i postgres
    - env | grep POSTGRES_PORT_5432_TCP_ADDR
    - psql -U postgres -d bts -W postgres docker-compose/schema.sql
    - psql -U postgres -d bts -W postgres docker-compose/testData.sql
#    - docker run -e PGPASSWORD=$POSTGRES_PASSWORD postgres:12.2 psql -U postgres -h $POSTGRES_PORT_5432_TCP_ADDR -c 'SELECT version();'
    #End of test
    - ./gradlew test --stacktrace
  allow_failure: true
  artifacts:
    expire_in: 1 day
    name: "test-results-$CI_COMMIT_REF_NAME"
    paths:
      - build/test-results/test/TEST-*.xml
    reports:
      junit: build/test-results/test/TEST-*.xml
  except:
    refs:
      - cicd-preprod

#git-secrets:
#  stage: security
#  image:
#  tags:
#    - java
#  #  before_script:
#  #    - apt-get update -y
#  #    - apt-get install -y postgresql-client-12
#  #    - psql -U postgres -d bts -W postgres docker-compose/schema.sql
#  #    - psql -U postgres -d bts -W postgres docker-compose/testData.sql
#  script:
#    #Testing if DB can be accessed
#    - env | grep -i postgres
#    - env | grep POSTGRES_PORT_5432_TCP_ADDR
#    #    - docker run -e PGPASSWORD=$POSTGRES_PASSWORD postgres:12.2 psql -U postgres -h $POSTGRES_PORT_5432_TCP_ADDR -c 'SELECT version();'
#    #End of test
#    - ./gradlew test --stacktrace
#  allow_failure: true
#  artifacts:
#    expire_in: 1 day
#    name: "test-results-$CI_COMMIT_REF_NAME"
#    paths:
#      - build/test-results/test/TEST-*.xml
#    reports:
#      junit: build/test-results/test/TEST-*.xml
#  except:
#    refs:
#      - cicd-preprod

scan:
  stage: security
  tags:
    - docker
  image:
    name: shiftleft/sast-scan:latest
  script:
    - scan --build --src ${CI_PROJECT_DIR} --type "credscan,java,depscan,dockerfile,docker/container image" --out_dir ${CI_PROJECT_DIR}/reports
  rules:
    - when: always
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - $CI_PROJECT_DIR/reports/
    when: always

#deploy:
#  cache: {}
#  stage: deploy
#  image: docker:stable
#  variables:
##    DOCKER_HOST: tcp://127.0.0.1:2375/
#    DOCKER_DRIVER: overlay2
#  services:
#    - docker:18.09.7-dind
#  tags:
#    - java
##    - docker-with-kubernetes
##    - icl-runner
#  dependencies:
#    - build
#  before_script:
#    - docker info
#    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY_IMAGE"
#  script:
#    - cp build/libs/$CI_PROJECT_NAME-0.0.1.jar app.jar
#    - docker build --build-arg JASYPT_ENCRYPTOR_PASSWORD -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_SHA .
#    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest
#    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
#    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_SHA
#  only:
#    refs:
#      - cicd-preprod

deploy2:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  before_script:
    #    - echo "$CI_REGISTRY_PASSWORD - $CI_REGISTRY_USER - $CI_REGISTRY_IMAGE - $CI_REGISTRY"
    - echo ""
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    refs:
      - master

# spotbugs-sast:
#   variables:
#     FAIL_NEVER: 1
#   tags:
#     - docker
#   artifacts:
#     reports:
#       sast: gl-sast-report.json
